---
export interface Props {
    position: 1 | 2;
    markdown?: string;
}

const { position, markdown } = Astro.props;

// Minimal markdown rendering for common inline cases (bold, italic, links, basic line breaks)
function renderMarkdown(md: string): string {
  if (!md) return '';
  let html = md;
  // Escape basic HTML to avoid accidental tags; allow our injected tags later
  html = html
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
  // Links: [text](url)
  html = html.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>');
  // Bold: **text** (do before italics)
  html = html.replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>');
  // Italic: *text*
  html = html.replace(/\*([^*]+)\*/g, '<em>$1</em>');
  // Line breaks
  html = html.replace(/\n/g, '<br />');
  return html;
}
---

<div class={`content-column content-column-${position}`}>
    <div class="markdown-content">
        {markdown ? (
            <Fragment set:html={renderMarkdown(markdown)} />
        ) : (
            <slot />
        )}
    </div>
</div>
